# Query Metrics requires a client certificate
server:
  ssl:
    client-auth: NEED

spring:
  cloud:
    stream:
      bindings:
        queryMetricSource:
          destination: queryMetricChannel
        queryMetricSink:
          destination: queryMetricChannel
          group: queryMetricService
    # NOTE: When defining your functions, be sure to include busConsumer, or else spring cloud bus will not work
#    function:
#      definition: queryMetricSink;busConsumer
    

warehouse-cluster:
  accumulo:
    zookeepers: '${accumulo.zookeepers}'
    instanceName: '${accumulo.instanceName}'
    username: '${accumulo.username}'
    password: '${accumulo.password}'

logging:
  level:
    ROOT: trace
    datawave:
      microservice:
        querymetric: trace
      iterators: error
      query: error
      ingest: error
      security: error

datawave:
  query:
    metric:
      handler:
        zookeepers: ${accumulo.zookeepers}
        instanceName: ${accumulo.instanceName}
        username: ${accumulo.username}
        password: ${accumulo.password}
        numShards: 10
        fieldLengthThreshold: 4049
        shardTableName: datawave.queryMetrics_s
        indexTableName: datawave.queryMetrics_i
        dateIndexTableName: datawave.queryMetrics_di
        reverseIndexTableName: datawave.queryMetrics_r
        metadataTableName: datawave.queryMetrics_m
        metadataDefaultAuths: PUBLIC
        recordWriterMaxMemory: 100000
        recordWriterMaxLatency: 0
        recordWriterNumThreads: 4
        enableBloomFilter: false
        queryVisibility: PUBLIC
        defaultMetricMarkings:
          columnVisibility: PUBLIC
        baseMaps: "{}"
      timely:
        enabled: false

  # this should be consolidated into a metadata application profile
  metadata:
    all-metadata-auths:
      - PRIVATE
      - PUBLIC
    type-substitutions:
      "[datawave.data.type.DateType]": "datawave.data.type.RawDateType"

hazelcast:
  client.enabled: false
  server:
    enabled: true
    xml-config: |
      <hazelcast xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://www.hazelcast.com/schema/config http://www.hazelcast.com/schema/config/hazelcast-config-3.11.xsd"
                  xmlns="http://www.hazelcast.com/schema/config">
        <map name="incomingQueryMetrics">
          <!-- Keep 1 backup copy of data (so we have 2 copies total) -->
          <backup-count>1</backup-count>
          <!-- Maximum time in seconds for each entry to stay idle in the map. (no get, put, EntryProcessor.process or
               containsKey is called.  Valid values are integers between 0 and Integer.MAX VALUE. Default is 0 / infinite -->
          <max-idle-seconds>600</max-idle-seconds>
          <!-- No matter what, entries get evicted after this time. -->
          <time-to-live-seconds>3600</time-to-live-seconds>
          <merge-policy>com.hazelcast.spi.merge.LatestUpdateMergePolicy</merge-policy>
          <!-- Evict the least frequently used entries first if we run out of space and allow 2GB for each cluster node to store data -->
          <!-- <eviction eviction-policy="LRU" max-size-policy="USED_NATIVE_MEMORY_SIZE" size="2048"/> -->
          <map-store enabled="true" initial-mode="LAZY">
            <factory-class-name>datawave.microservice.querymetric.peristence.AccumuloMapStore$Factory</factory-class-name>
            <write-delay-seconds>1</write-delay-seconds>
            <write-batch-size>1000</write-batch-size>
          </map-store>
        </map>
        <map name="lastWrittenQueryMetrics">
          <!-- Keep 1 backup copy of data (so we have 2 copies total) -->
          <backup-count>1</backup-count>
          <!-- Maximum time in seconds for each entry to stay idle in the map. (no get, put, EntryProcessor.process or
               containsKey is called.  Valid values are integers between 0 and Integer.MAX VALUE. Default is 0 / infinite -->
          <max-idle-seconds>600</max-idle-seconds>
          <!-- No matter what, entries get evicted after this time. -->
          <time-to-live-seconds>3600</time-to-live-seconds>
          <merge-policy>com.hazelcast.spi.merge.LatestUpdateMergePolicy</merge-policy>
          <!-- Evict the least frequently used entries first if we run out of space and allow 2GB for each cluster node to store data -->
          <!-- <eviction eviction-policy="LFU" max-size-policy="USED_NATIVE_MEMORY_SIZE" size="2048"/> -->
          <map-store enabled="true" initial-mode="LAZY">
            <factory-class-name>datawave.microservice.querymetric.peristence.AccumuloMapLoader$Factory</factory-class-name>
          </map-store>
        </map>
      </hazelcast>
  clusterName: '${spring.application.name}'
